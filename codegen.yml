schema:
  - ${RAZZLE_API_BASE_URL}/graphql:
      loader: ./src/api/client-schema.graphql.ts
documents:
  - ./src/**/*.graphql
  - '!./src/api/client-schema.graphql'
overwrite: true
config:
  # Use `import type` which should be default for TS 3.8+
  useTypeImports: true
  # Immutability is great, but Apollo also enforces this at runtime (at least in dev)
  # so this ensures that invalid code is caught before runtime.
  immutableTypes: true

generates:
  # Generate schema file so IDEs can autocomplete graphql documents
  ./schema.graphql:
    plugins:
      - schema-ast

  # Generate fragment matcher for Apollo's caching
  ./src/api/fragmentMatcher/fragmentMatcher.generated.ts:
    plugins:
      - ./src/api/fragmentMatcher/fragmentMatcher.codegen

  # Generate type policies automatically specific to our API
  ./src/api/typePolicies/typePolicies.generated.ts:
    plugins:
      - ./src/api/typePolicies/typePolicies.codegen

  # Generate lists for all of our enums
  ./src/api/enumLists/enumLists.generated.ts:
    plugins:
      - ./src/api/enumLists/enumLists.codegen

  # Generate a type map for all of our GQL object types
  ./src/api/typeMap.generated.ts:
    plugins:
      - ./src/api/typeMap.codegen

  # Generate TypeScript version of graphql schema
  ./src/api/schema.generated.ts:
    plugins:
      - typescript
      - add:
          placement: prepend
          content: |
            import { DateTime } from 'luxon';
            import { CalendarDate } from '../util';
    config:
      scalars:
        Date: CalendarDate
        DateTime: DateTime
      skipTypename: false
      enumsAsTypes: true

  # Generate an object housing all of our operations
  # This allows operations to be cross-referenced (i.e. `refetchQueries`) without needing to rely on magic strings
  ./src/api/operations.generated.ts:
    plugins:
      - ./src/api/operations.codegen
    config:
      identifierName: GQLOperations

  # Generate types & react hooks for our operations
  ./src/:
    preset: near-operation-file
    presetConfig:
      extension: .generated.ts
      baseTypesPath: api/schema.generated.ts
    plugins:
      - typescript-operations
      - typed-document-node
    config:
      gqlImport: graphql-tag
      documentMode: graphQLTag
      skipTypename: false
      enumsAsTypes: true
      # Instead of Pick-ing from generated schema, redefine shape inline
      # Skipping for now, since schema has docs which IDE can provide when Pick is used.
      preResolveTypes: false
      # Removes useless __typename from query/mutation root types which are always "Query" or "Mutation"
      skipTypeNameForRoot: true
